/**
 * IntegratorAPI
 * Forgiva Integrator API containing whole operations between Forgiva SuperClient and Integrator server traffic. It can be used by any 3rd party clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: root@sceptive.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IntegratorApi);
  }
}(this, function(expect, IntegratorApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IntegratorApi.UserOperationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserOperationsApi', function() {
    describe('postUserGenerate', function() {
      it('should call postUserGenerate successfully', function(done) {
        //uncomment below and update the code to test postUserGenerate
        //instance.postUserGenerate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataAdd', function() {
      it('should call postUserMetadataAdd successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataAdd
        //instance.postUserMetadataAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataBygroup', function() {
      it('should call postUserMetadataBygroup successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataBygroup
        //instance.postUserMetadataBygroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataGroupAdd', function() {
      it('should call postUserMetadataGroupAdd successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataGroupAdd
        //instance.postUserMetadataGroupAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataGroupRemove', function() {
      it('should call postUserMetadataGroupRemove successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataGroupRemove
        //instance.postUserMetadataGroupRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataGroups', function() {
      it('should call postUserMetadataGroups successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataGroups
        //instance.postUserMetadataGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataHost', function() {
      it('should call postUserMetadataHost successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataHost
        //instance.postUserMetadataHost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataRemove', function() {
      it('should call postUserMetadataRemove successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataRemove
        //instance.postUserMetadataRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMetadataSearch', function() {
      it('should call postUserMetadataSearch successfully', function(done) {
        //uncomment below and update the code to test postUserMetadataSearch
        //instance.postUserMetadataSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserPasswordChange', function() {
      it('should call postUserPasswordChange successfully', function(done) {
        //uncomment below and update the code to test postUserPasswordChange
        //instance.postUserPasswordChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserSettingsGet', function() {
      it('should call postUserSettingsGet successfully', function(done) {
        //uncomment below and update the code to test postUserSettingsGet
        //instance.postUserSettingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserSettingsSet', function() {
      it('should call postUserSettingsSet successfully', function(done) {
        //uncomment below and update the code to test postUserSettingsSet
        //instance.postUserSettingsSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
