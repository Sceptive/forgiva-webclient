/**
 * IntegratorAPI
 * Forgiva Integrator API containing whole operations between Forgiva SuperClient and Integrator server traffic. It can be used by any 3rd party clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: root@sceptive.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Header from './Header';
import Metadata from './Metadata';

/**
 * The PostUserMetadataAddRequest model module.
 * @module model/PostUserMetadataAddRequest
 * @version 1.0
 */
class PostUserMetadataAddRequest {
    /**
     * Constructs a new <code>PostUserMetadataAddRequest</code>.
     * @alias module:model/PostUserMetadataAddRequest
     * @param metadata {module:model/Metadata} 
     * @param passwordLength {Number} Password length of the generated password.
     * @param optUppercase {Boolean} Password should have upper case letters.
     * @param optLowercase {Boolean} Password should have lower case letters.
     * @param optNumbers {Boolean} Password should have numbers.
     * @param optSymbols {Boolean} Password should have symbols.
     */
    constructor(metadata, passwordLength, optUppercase, optLowercase, optNumbers, optSymbols) { 
        
        PostUserMetadataAddRequest.initialize(this, metadata, passwordLength, optUppercase, optLowercase, optNumbers, optSymbols);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metadata, passwordLength, optUppercase, optLowercase, optNumbers, optSymbols) { 
        obj['metadata'] = metadata;
        obj['passwordLength'] = passwordLength;
        obj['optUppercase'] = optUppercase;
        obj['optLowercase'] = optLowercase;
        obj['optNumbers'] = optNumbers;
        obj['optSymbols'] = optSymbols;
    }

    /**
     * Constructs a <code>PostUserMetadataAddRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostUserMetadataAddRequest} obj Optional instance to populate.
     * @return {module:model/PostUserMetadataAddRequest} The populated <code>PostUserMetadataAddRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostUserMetadataAddRequest();

            if (data.hasOwnProperty('header')) {
                obj['header'] = Header.constructFromObject(data['header']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('passwordLength')) {
                obj['passwordLength'] = ApiClient.convertToType(data['passwordLength'], 'Number');
            }
            if (data.hasOwnProperty('optUppercase')) {
                obj['optUppercase'] = ApiClient.convertToType(data['optUppercase'], 'Boolean');
            }
            if (data.hasOwnProperty('optLowercase')) {
                obj['optLowercase'] = ApiClient.convertToType(data['optLowercase'], 'Boolean');
            }
            if (data.hasOwnProperty('optNumbers')) {
                obj['optNumbers'] = ApiClient.convertToType(data['optNumbers'], 'Boolean');
            }
            if (data.hasOwnProperty('optSymbols')) {
                obj['optSymbols'] = ApiClient.convertToType(data['optSymbols'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Header} header
 */
PostUserMetadataAddRequest.prototype['header'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
PostUserMetadataAddRequest.prototype['metadata'] = undefined;

/**
 * Password length of the generated password.
 * @member {Number} passwordLength
 */
PostUserMetadataAddRequest.prototype['passwordLength'] = undefined;

/**
 * Password should have upper case letters.
 * @member {Boolean} optUppercase
 */
PostUserMetadataAddRequest.prototype['optUppercase'] = undefined;

/**
 * Password should have lower case letters.
 * @member {Boolean} optLowercase
 */
PostUserMetadataAddRequest.prototype['optLowercase'] = undefined;

/**
 * Password should have numbers.
 * @member {Boolean} optNumbers
 */
PostUserMetadataAddRequest.prototype['optNumbers'] = undefined;

/**
 * Password should have symbols.
 * @member {Boolean} optSymbols
 */
PostUserMetadataAddRequest.prototype['optSymbols'] = undefined;






export default PostUserMetadataAddRequest;

