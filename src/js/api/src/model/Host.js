/**
 * IntegratorAPI
 * Forgiva Integrator API containing whole operations between Forgiva SuperClient and Integrator server traffic. It  can be used by any 3rd party clients. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: root@sceptive.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Host model module.
 * @module model/Host
 * @version 1.0
 */
class Host {
    /**
     * Constructs a new <code>Host</code>.
     * @alias module:model/Host
     */
    constructor() { 
        
        Host.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Host</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Host} obj Optional instance to populate.
     * @return {module:model/Host} The populated <code>Host</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Host();

            if (data.hasOwnProperty('hostId')) {
                obj['hostId'] = ApiClient.convertToType(data['hostId'], 'Number');
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('dnsName')) {
                obj['dnsName'] = ApiClient.convertToType(data['dnsName'], 'String');
            }
            if (data.hasOwnProperty('operatingSystemName')) {
                obj['operatingSystemName'] = ApiClient.convertToType(data['operatingSystemName'], 'String');
            }
            if (data.hasOwnProperty('operatingSystemVersion')) {
                obj['operatingSystemVersion'] = ApiClient.convertToType(data['operatingSystemVersion'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('reserved1')) {
                obj['reserved1'] = ApiClient.convertToType(data['reserved1'], 'String');
            }
            if (data.hasOwnProperty('reserved2')) {
                obj['reserved2'] = ApiClient.convertToType(data['reserved2'], 'String');
            }
            if (data.hasOwnProperty('reserved3')) {
                obj['reserved3'] = ApiClient.convertToType(data['reserved3'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} hostId
 */
Host.prototype['hostId'] = undefined;

/**
 * @member {String} hostName
 */
Host.prototype['hostName'] = undefined;

/**
 * @member {String} dnsName
 */
Host.prototype['dnsName'] = undefined;

/**
 * @member {String} operatingSystemName
 */
Host.prototype['operatingSystemName'] = undefined;

/**
 * @member {String} operatingSystemVersion
 */
Host.prototype['operatingSystemVersion'] = undefined;

/**
 * @member {String} description
 */
Host.prototype['description'] = undefined;

/**
 * @member {String} reserved1
 */
Host.prototype['reserved1'] = undefined;

/**
 * @member {String} reserved2
 */
Host.prototype['reserved2'] = undefined;

/**
 * @member {String} reserved3
 */
Host.prototype['reserved3'] = undefined;






export default Host;

