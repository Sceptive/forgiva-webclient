/**
 * IntegratorAPI
 * Forgiva Integrator API containing whole operations between Forgiva SuperClient and Integrator server traffic. It  can be used by any 3rd party clients. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: root@sceptive.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metadata model module.
 * @module model/Metadata
 * @version 1.0
 */
class Metadata {
    /**
     * Constructs a new <code>Metadata</code>.
     * Contains metadata information.
     * @alias module:model/Metadata
     * @param host {String} Host description of the metadata.
     * @param account {String} Account of the metadata.
     * @param complexity {Number} Complexity range 1-3 for password generation.
     */
    constructor(host, account, complexity) { 
        
        Metadata.initialize(this, host, account, complexity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, host, account, complexity) { 
        obj['host'] = host;
        obj['account'] = account;
        obj['complexity'] = complexity;
    }

    /**
     * Constructs a <code>Metadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metadata} obj Optional instance to populate.
     * @return {module:model/Metadata} The populated <code>Metadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metadata();

            if (data.hasOwnProperty('metadataId')) {
                obj['metadataId'] = ApiClient.convertToType(data['metadataId'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('lastRenewal')) {
                obj['lastRenewal'] = ApiClient.convertToType(data['lastRenewal'], 'String');
            }
            if (data.hasOwnProperty('complexity')) {
                obj['complexity'] = ApiClient.convertToType(data['complexity'], 'Number');
            }
            if (data.hasOwnProperty('generatedBefore')) {
                obj['generatedBefore'] = ApiClient.convertToType(data['generatedBefore'], 'Boolean');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique metadata id
 * @member {String} metadataId
 */
Metadata.prototype['metadataId'] = undefined;

/**
 * Host description of the metadata.
 * @member {String} host
 */
Metadata.prototype['host'] = undefined;

/**
 * Account of the metadata.
 * @member {String} account
 */
Metadata.prototype['account'] = undefined;

/**
 * Last renewal date for the metadata for password generation.
 * @member {String} lastRenewal
 */
Metadata.prototype['lastRenewal'] = undefined;

/**
 * Complexity range 1-3 for password generation.
 * @member {Number} complexity
 */
Metadata.prototype['complexity'] = undefined;

/**
 * Indicates whether password generated before or not. If not password generation process should ensure  that user is entering master password right. 
 * @member {Boolean} generatedBefore
 */
Metadata.prototype['generatedBefore'] = undefined;

/**
 * Unique group id.
 * @member {String} groupId
 */
Metadata.prototype['groupId'] = undefined;






export default Metadata;

