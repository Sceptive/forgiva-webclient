/**
 * IntegratorAPI
 * Forgiva Integrator API containing whole operations between Forgiva SuperClient and Integrator server traffic. It can be used by any 3rd party clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: root@sceptive.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PostLogin2faRequest from '../model/PostLogin2faRequest';
import PostLogin2faResponse from '../model/PostLogin2faResponse';
import PostLoginRequest from '../model/PostLoginRequest';
import PostLoginResponse from '../model/PostLoginResponse';
import PostLogoutRequest from '../model/PostLogoutRequest';
import PostNewSessionRequest from '../model/PostNewSessionRequest';
import PostNewSessionResponse from '../model/PostNewSessionResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postLogin operation.
     * @callback module:api/DefaultApi~postLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Actual logging-in web service holds single point authentication mechanism.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostLoginRequest} opts.postLoginRequest 
     * @param {module:api/DefaultApi~postLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostLoginResponse}
     */
    postLogin(opts, callback) {
      opts = opts || {};
      let postBody = opts['postLoginRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostLoginResponse;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLogin2fa operation.
     * @callback module:api/DefaultApi~postLogin2faCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostLogin2faResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with two-factor-authentication
     * Two-factor-authentication (2FA) code delivery web service. Not required by default if did not configured on server side.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostLogin2faRequest} opts.postLogin2faRequest 
     * @param {module:api/DefaultApi~postLogin2faCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostLogin2faResponse}
     */
    postLogin2fa(opts, callback) {
      opts = opts || {};
      let postBody = opts['postLogin2faRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostLogin2faResponse;
      return this.apiClient.callApi(
        '/login2fa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLogout operation.
     * @callback module:api/DefaultApi~postLogoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * Logs out (and invalidates) session with sessionId
     * @param {Object} opts Optional parameters
     * @param {module:model/PostLogoutRequest} opts.postLogoutRequest 
     * @param {module:api/DefaultApi~postLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postLogout(opts, callback) {
      opts = opts || {};
      let postBody = opts['postLogoutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNewSession operation.
     * @callback module:api/DefaultApi~postNewSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostNewSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialization or validation of a session
     * This service initializes session or validates it (by checking header object) and provides server configuration values to the client.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNewSessionRequest} opts.postNewSessionRequest 
     * @param {module:api/DefaultApi~postNewSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostNewSessionResponse}
     */
    postNewSession(opts, callback) {
      opts = opts || {};
      let postBody = opts['postNewSessionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostNewSessionResponse;
      return this.apiClient.callApi(
        '/new_session', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
